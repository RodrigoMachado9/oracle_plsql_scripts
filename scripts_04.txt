# exercicios 15 em diante

/*
Criar um bloco PL/SQL para localizar um registro de cliente na tabela CLIENTE e a partir daí, gerar registros de parcelas de pagamentos na tabela TITULO.

O código do cliente deverá ser informado em tempo de execução e, existindo o cliente, checar o valor de suas vendas para gerar as parcelas na tabela TITULO, de acordo com as regras abaixo:

Se as vendas forem até 6000.00, gerar 10 registros de parcelas correspondentes a 10 pagamentos.
Se as vendas estiverem entre 6000.00 e 7000.00 (inclusive), gerar 15 registros de parcelas correspondentes a 15 pagamentos.
Acima de 7000.00, gerar 20 registros de parcelas correspondentes a 20 pagamentos.

Informações a serem alimentadas na tabela TITULO, quando da inserção das parcelas acima mencionadas:
TABELA TITULO:
Nome                          Tipo
------------------------------ -------------
NUM_TITULO              NUMBER(5)    
CODIGO                     NUMBER(5)
VALOR_TITULO          NUMBER(11,2)
VALOR_JUROS           NUMBER(11,2)
VALOR_DESC             NUMBER(11,2)
VALOR_PAGO             NUMBER(11,2)
DT_EMISSAO              DATE
DT_VENC                    DATE
DT_PAGTO                  DATE

INFORMAÇÕES:

NUM_TITULO: Seqüencial a partir de 1
CODIGO: Código do cliente informado
VALOR_TITULO: Valor da venda dividido pelo número de parcelas
VALOR_JUROS = 0
VALOR_DESC = 0
VALOR_PAGO = 0  
DT_EMISSAO = sysdate
DT_VENC = 30 em 30 dias, após a data de emissão corrente para cada parcela
DT_PAGTO = null

No final, apresentar na tela o código do cliente, o valor de cada parcela e a data de vencimento da última parcela.
Obs: 1. Administrar erro caso o cliente não exista.
2. Criar uma sequência para alimentar o campo NUM_TITULO, conforme comando abaixo:
CREATE SEQUENCE seq_numtit INCREMENT BY 1 START WITH 1;
*/



 -- cria determinada sequence para coluna;
create sequence s_num_titulo increment by 1 start with 1;



DECLARE
    v_codigo cliente.codigo%type :=&v_codigo;
    v_venda cliente.venda%type;
    v_parcela cliente.parcela%type;
    v_data_system DATE := to_date(trunc(SYSDATE), 'DD/MM/YYYY');
    v_titulo number;
    
    CURSOR table_client IS SELECT CODIGO , NOME , ENDERECO , ESTADO , CEP , VENDA , DT_NASC , PARCELA ,
    STATUS , VALOR_NOTA , EMISSAO_NOTA  FROM cliente where codigo = v_codigo;

BEGIN

  FOR client in table_client
    LOOP
        CASE 
          WHEN client.venda <= 6000.00 THEN 
            FOR v_contador in 1..10 LOOP 
              v_titulo := (client.venda/client.parcela);
              INSERT INTO titulo(num_titulo, codigo, valor_titulo, valor_juros,  valor_desc, 
              valor_pago, dt_emissao, dt_venc, dt_pagto) VALUES (s_titulo.NEXTVAL,
              client.codigo, v_titulo, 0, 0, 0, v_data_system, v_data_system + 30, null);
              END LOOP;
          WHEN client.venda BETWEEN 6000.00 AND 7000.00 THEN
          FOR v_contador in 1..15 LOOP
              INSERT INTO titulo(num_titulo, codigo, valor_titulo, valor_juros,  valor_desc, 
              valor_pago, dt_emissao, dt_venc, dt_pagto) VALUES (s_titulo.NEXTVAL,
              client.codigo, v_titulo, 0, 0, 0, v_data_system, v_data_system + 30, null);
              END LOOP;
          WHEN client.venda > 7000.00 THEN
          FOR v_contador in  1..20 LOOP
              INSERT INTO titulo(num_titulo, codigo, valor_titulo, valor_juros,  valor_desc, 
                valor_pago, dt_emissao, dt_venc, dt_pagto) VALUES (s_titulo.NEXTVAL,
                client.codigo, v_titulo, 0, 0, 0, v_data_system, v_data_system + 30, null);
              END LOOP;
          END CASE;
    END LOOP;


EXCEPTION
  WHEN NO_DATA_FOUND THEN 
    SYS.DBMS_OUTPUT.PUT_LINE('codigo: ' || v_codigo || ' nao encontrado');
      
END;



# exercicio 16 em diante


DECLARE 
    v_account_number lanc.n_conta%TYPE;
    v_current_date DATE := to_date(trunc(SYSDATE), 'DD/MM/YYYY');
    v_option VARCHAR(10);
    v_increment_number  NUMBER;
    v_contador v_increment_number%TYPE;
    -- zone this control exceptions -- 
    v_option_is_null EXCEPTION;
    v_options EXCEPTION;
    ----------------------------------
    
    CURSOR table_lauch IS SELECT N_CONTA, HISTORICO FROM lanc;
  
BEGIN 
    v_option :='& number_option';
    CASE
      WHEN v_option IS NOT NULL THEN 
            CASE 
                  WHEN v_option = 0 THEN 
                  v_contador:=0;
                    v_increment_number:=120;
                    FOR var IN  1..10 LOOP
                      SYS.DBMS_OUTPUT.PUT_LINE(v_increment_number);
                      INSERT INTO lanc(N_LANC, DT_LANC, N_CONTA, VALOR, HISTORICO) VALUES(v_increment_number, v_current_date, 4, 100, 'crédito de cesta básica');
                      v_increment_number:=v_increment_number + 1;
                      v_contador:= v_contador+1;
                    END LOOP;
                    -- apresentar a quantidade de lançamentos inclusos....
                  WHEN v_option = 1 THEN
                  v_contador:= 0;
                  v_increment_number:=150;
                  FOR var IN  1..10 LOOP
                      SYS.DBMS_OUTPUT.PUT_LINE(v_increment_number);
                      INSERT INTO lanc(N_LANC, DT_LANC, N_CONTA, VALOR, HISTORICO) VALUES(v_increment_number, v_current_date, 2, 180, 'depósito em conta corrente');
                      v_increment_number:=v_increment_number + 1;
                      v_contador:= v_contador+1;
                    END LOOP; 
            ELSE 
                RAISE v_options;
            END CASE;
      ELSE
          RAISE v_option_is_null;
    END CASE;
    SYS.DBMS_OUTPUT.PUT_LINE('the number of lauches is equal to!  ' ||  v_increment_number);
EXCEPTION
  WHEN v_option_is_null THEN
    sys.dbms_output.put_line('variable does not accept empty');
  WHEN v_options THEN 
    sys.dbms_output.put_line('0 to 100,00 or 1 to 180,00');
END;
