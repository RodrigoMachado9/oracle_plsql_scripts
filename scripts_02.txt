/*
Criar um bloco PL-SQL para acessar um determinado fornecedor na tabela FORNECEDOR, 
cujo código do fornecedor deverá ser informado em tempo de execução. 
Apresente na tela o seu código, endereço e o valor de suas vendas.
*/
DECLARE
  v_cod_provider FORNECEDOR.N_FORNEC%TYPE;
  v_has_cod FORNECEDOR.N_FORNEC%TYPE;
  v_address FORNECEDOR.ENDERECO%TYPE;
  v_sales   FORNECEDOR.VENDA%TYPE;
BEGIN 
   v_cod_provider:='& TYPE_THE_COD_PROVIDER';
   SELECT N_FORNEC INTO v_has_cod FROM fornecedor WHERE N_FORNEC = v_cod_provider;
   IF v_has_cod = v_cod_provider THEN
        SELECT ENDERECO, VENDA INTO v_address, v_sales FROM fornecedor WHERE N_FORNEC = v_cod_provider;         
        SYS.DBMS_OUTPUT.PUT_LINE('The supplier,s address >>' || v_address );
        SYS.DBMS_OUTPUT.PUT_LINE('The value of sales >>' || v_sales );
    END IF;
EXCEPTION 
     WHEN NO_DATA_FOUND THEN
        SYS.DBMS_OUTPUT.PUT_LINE('invalid code');
     WHEN OTHERS THEN 
         SYS.DBMS_OUTPUT.PUT_LINE('invalid data type');
END;





/*
ACESSAR TABELA FORNECEDOR, CUJO CÓDIGO DEVERÁ SER INFORMADO NA TELA E ALTERAR O VALOR DA COMISSÃO, NAS CONDIÇÕES ABAIXO.
Criar um bloco PL-SQL para acessar, na tabela FORNECEDOR, o fornecedor informado na tela e executar as seguintes ações:
Caso não encontre dar a mensagem ‘ FORNECEDOR NÃO INFORMADO’

Caso encontre deverá fazer a seguinte atualização na comissão:

Se as vendas forem maiores que 6000  a comissão deverá ser 15% do valor das vendas
Caso contrário  a comissão deverá ser 5% do valor das vendas

No final, dar uma mensagem do valor calculado da comissão.

*/

DECLARE 
  v_cod_provider FORNECEDOR.N_FORNEC%TYPE;
  v_has_cod FORNECEDOR.N_FORNEC%TYPE;
  v_commission FORNECEDOR.COMISSAO%TYPE;
  v_sales FORNECEDOR.VENDA%TYPE;
  
BEGIN 
   v_cod_provider:='& TYPE_THE_COD_PROVIDER';
   SELECT N_FORNEC, COMISSAO , VENDA INTO v_has_cod, v_commission , v_sales FROM fornecedor WHERE N_FORNEC = v_cod_provider;
   IF v_has_cod = v_cod_provider THEN
      SYS.DBMS_OUTPUT.PUT_LINE(' comission ' || v_commission );
      SYS.DBMS_OUTPUT.PUT_LINE(' sales ' || v_sales);
      IF v_sales > 6000 THEN
          v_commission:= (v_sales * 0.15);
          UPDATE fornecedor SET COMISSAO = v_commission WHERE N_FORNEC = v_cod_provider;
      ELSE
          v_commission:=(v_sales * 0.05);
          UPDATE fornecedor SET COMISSAO = v_commission WHERE N_FORNEC = v_cod_provider;
      END IF;
   END IF;
  SYS.DBMS_OUTPUT.PUT_LINE(' calculated commission amount' || v_commission);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      SYS.DBMS_OUTPUT.PUT_LINE( ' FORNECEDOR NÃO INFORMADO ' );
END;





/*
Acessar a tabela “CONTA” pesquisando registro e em função do resultado da pesquisa, inserir nova linha na tabela A_FAZER.
*/
/*
Criar um bloco PL-SQL para recuperar, na tabela CONTA, 
o numero da conta com saldo 
inferior a R$ 10.000 em uma variável e caso encontre um registro, 

inserir na tabela A_FAZER uma nova tarefa nos campos abaixo:
FEITO = ‘N’
DATA = data do sistema
OBSERV = ‘Mensagem para CC nº xxxx – saldo baixo’
*/


DECLARE 
  v_data_system DATE := trunc(SYSDATE);
  CURSOR account IS SELECT  * FROM conta WHERE SALDO < 10000;
BEGIN 
      FOR column_value in account
      LOOP
          INSERT INTO A_FAZER(FEITO, DATA, OBSERV) VALUES('N', v_data_system, 'Mensagem para CC n - '|| column_value.n_conta ||' - ' ||'saldo:  '||column_value.saldo);
      END LOOP;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SYS.DBMS_OUTPUT.PUT_LINE( ' << number account not exists >> ');
    WHEN TOO_MANY_ROWS THEN 
        SYS.DBMS_OUTPUT.PUT_LINE( '<< errors >>');        
END;





/*
Criar um bloco PL/SQL para atualizar um campo 
numa tabela de acordo com o resultado de uma pesquisa feita no registro dessa tabela. 
Antes de criar o bloco para atualização dos dados, execute os comandos abaixo para criação e inserção de dados na tabela ALUNO.
*/

/*Criar uma tabela conforme segue:
CREATE TABLE ALUNO 
( RA NUMBER(9) PRIMARY KEY,  NOME VARCHAR(50) NOT NULL, 
  DISCIPLINA VARCHAR(30),  MEDIA NUMBER(3,1),  CARGA_HORA NUMBER(2), 
  FALTAS NUMBER(2), RESULTADO VARCHAR(10)
);
*/

/*Inserir registros na tabela ALUNO deixando a coluna RESULTADO em branco.
INSERT INTO ALUNO VALUES (100, ‘Luis’, ’Modelagem Dados',7.5,80,14,null);
INSERT INTO ALUNO VALUES (200, ‘Carla’, ’Modelagem Dados',4.5,80,16,null);
INSERT INTO ALUNO VALUES (300, ‘Pedro’, ’Modelagem Dados',6.0,80,24,null);*/
*/

/*DESAFIO  ::
Criar um bloco PL/SQL para pesquisar um nº de RA fornecido em tempo de execução e, 
encontrando o registro, atualizar o campo RESULTADO, 
de acordo com as regras abaixo:



Se o aluno obteve média igual ou maior que 7.0 e suas faltas não ultrapassarem 25% da carga horária da disciplina o resultado será: APROVADO.
Se o aluno obteve média inferior a 7.0 e suas faltas não ultrapassarem 25% da carga horária da disciplina o resultado será: EXAME.

Para os demais casos o resultado será: REPROVADO.*/

SELECT COUNT(ra) qtd_ra FROM aluno WHERE RA ='1300'

DECLARE 
    v_ra ALUNO.RA%TYPE;
    v_name ALUNO.NOME%TYPE;
    v_average ALUNO.MEDIA%TYPE;
    v_falts ALUNO.FALTAS%TYPE;
    v_c_hours ALUNO.CARGA_HORA%TYPE;
    v_qtd  NUMBER;
BEGIN
    v_ra:='& TYPE_OF_RA_NUMBER';
    
    select count(ra) into v_qtd from aluno where ra = v_ra;
    SYS.DBMS_OUTPUT.PUT_LINE(v_qtd);
    IF v_qtd > 0 THEN    
        SELECT MEDIA, FALTAS, CARGA_HORA, NOME INTO v_average, v_falts, v_c_hours, v_name FROM ALUNO WHERE RA = v_ra;
        SYS.DBMS_OUTPUT.PUT_LINE('Average: ' || v_average);
        IF ( v_average >= 7.0 ) AND ( v_falts < (0.25 * v_c_hours) ) THEN
            UPDATE ALUNO SET resultado = 'APROVADO' WHERE RA =  v_ra;
            SYS.DBMS_OUTPUT.PUT_LINE('Student: '|| v_name);
            IF ( v_average < 7.0 ) AND ( v_falts <= (0.25 * v_c_hours) ) THEN
                UPDATE ALUNO SET resultado = 'EXAME' WHERE RA =  v_ra;
                SYS.DBMS_OUTPUT.PUT_LINE('Student: '|| v_name);
            END IF;
        END IF;     
    END IF;
EXCEPTION        
    WHEN INVALID_NUMBER THEN
        SYS.DBMS_OUTPUT.PUT_LINE('there was an error during the conversion');
    WHEN NO_DATA_FOUND THEN
        SYS.DBMS_OUTPUT.PUT_LINE(v_ra || ' not found');
END;
